
BareMetalDrivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a0c  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000bd0  08000bd0  00001bd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000bdc  08000bdc  00001bec  2**0
                  CONTENTS
  4 .ARM          00000008  08000bdc  08000bdc  00001bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000be4  08000bec  00001bec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000be4  08000be4  00001be4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000be8  08000be8  00001be8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  00001bec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000bec  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000bec  0000201c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00001bec  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001254  00000000  00000000  00001c1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000042a  00000000  00000000  00002e70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000150  00000000  00000000  000032a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000f0  00000000  00000000  000033f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000021e8  00000000  00000000  000034e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000189c  00000000  00000000  000056c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009329  00000000  00000000  00006f64  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001028d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000049c  00000000  00000000  000102d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  0001076c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000000 	.word	0x20000000
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000bb8 	.word	0x08000bb8

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000004 	.word	0x20000004
 8000200:	08000bb8 	.word	0x08000bb8

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <GPIO_PeriClockControl>:
 * @return						- none
 *
 * @note						- none
 *************************************************************************************************************************************************/
void GPIO_PeriClockControl (GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
 800021a:	6078      	str	r0, [r7, #4]
 800021c:	460b      	mov	r3, r1
 800021e:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000220:	78fb      	ldrb	r3, [r7, #3]
 8000222:	2b01      	cmp	r3, #1
 8000224:	d157      	bne.n	80002d6 <GPIO_PeriClockControl+0xc2>
    {
        if (pGPIOx == GPIOA)
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a59      	ldr	r2, [pc, #356]	@ (8000390 <GPIO_PeriClockControl+0x17c>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d106      	bne.n	800023c <GPIO_PeriClockControl+0x28>
        {
        	GPIOA_PCLK_EN();
 800022e:	4b59      	ldr	r3, [pc, #356]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000230:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000232:	4a58      	ldr	r2, [pc, #352]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000234:	f043 0301 	orr.w	r3, r3, #1
 8000238:	6313      	str	r3, [r2, #48]	@ 0x30
		else if (pGPIOx == GPIOH)
		{
			GPIOH_PCLK_DI();
		}
    }
}
 800023a:	e0a3      	b.n	8000384 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOB)
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	4a56      	ldr	r2, [pc, #344]	@ (8000398 <GPIO_PeriClockControl+0x184>)
 8000240:	4293      	cmp	r3, r2
 8000242:	d106      	bne.n	8000252 <GPIO_PeriClockControl+0x3e>
        	GPIOB_PCLK_EN();
 8000244:	4b53      	ldr	r3, [pc, #332]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000248:	4a52      	ldr	r2, [pc, #328]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 800024a:	f043 0302 	orr.w	r3, r3, #2
 800024e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000250:	e098      	b.n	8000384 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOC)
 8000252:	687b      	ldr	r3, [r7, #4]
 8000254:	4a51      	ldr	r2, [pc, #324]	@ (800039c <GPIO_PeriClockControl+0x188>)
 8000256:	4293      	cmp	r3, r2
 8000258:	d106      	bne.n	8000268 <GPIO_PeriClockControl+0x54>
        	GPIOC_PCLK_EN();
 800025a:	4b4e      	ldr	r3, [pc, #312]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 800025c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800025e:	4a4d      	ldr	r2, [pc, #308]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000260:	f043 0304 	orr.w	r3, r3, #4
 8000264:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000266:	e08d      	b.n	8000384 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOD)
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	4a4d      	ldr	r2, [pc, #308]	@ (80003a0 <GPIO_PeriClockControl+0x18c>)
 800026c:	4293      	cmp	r3, r2
 800026e:	d106      	bne.n	800027e <GPIO_PeriClockControl+0x6a>
        	GPIOD_PCLK_EN();
 8000270:	4b48      	ldr	r3, [pc, #288]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000272:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000274:	4a47      	ldr	r2, [pc, #284]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000276:	f043 0308 	orr.w	r3, r3, #8
 800027a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800027c:	e082      	b.n	8000384 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOE)
 800027e:	687b      	ldr	r3, [r7, #4]
 8000280:	4a48      	ldr	r2, [pc, #288]	@ (80003a4 <GPIO_PeriClockControl+0x190>)
 8000282:	4293      	cmp	r3, r2
 8000284:	d106      	bne.n	8000294 <GPIO_PeriClockControl+0x80>
        	GPIOE_PCLK_EN();
 8000286:	4b43      	ldr	r3, [pc, #268]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800028a:	4a42      	ldr	r2, [pc, #264]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 800028c:	f043 0310 	orr.w	r3, r3, #16
 8000290:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000292:	e077      	b.n	8000384 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOF)
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	4a44      	ldr	r2, [pc, #272]	@ (80003a8 <GPIO_PeriClockControl+0x194>)
 8000298:	4293      	cmp	r3, r2
 800029a:	d106      	bne.n	80002aa <GPIO_PeriClockControl+0x96>
        	GPIOF_PCLK_EN();
 800029c:	4b3d      	ldr	r3, [pc, #244]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 800029e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002a0:	4a3c      	ldr	r2, [pc, #240]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 80002a2:	f043 0320 	orr.w	r3, r3, #32
 80002a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002a8:	e06c      	b.n	8000384 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOG)
 80002aa:	687b      	ldr	r3, [r7, #4]
 80002ac:	4a3f      	ldr	r2, [pc, #252]	@ (80003ac <GPIO_PeriClockControl+0x198>)
 80002ae:	4293      	cmp	r3, r2
 80002b0:	d106      	bne.n	80002c0 <GPIO_PeriClockControl+0xac>
        	GPIOG_PCLK_EN();
 80002b2:	4b38      	ldr	r3, [pc, #224]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 80002b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002b6:	4a37      	ldr	r2, [pc, #220]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 80002b8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80002bc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002be:	e061      	b.n	8000384 <GPIO_PeriClockControl+0x170>
        else if (pGPIOx == GPIOH)
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	4a3b      	ldr	r2, [pc, #236]	@ (80003b0 <GPIO_PeriClockControl+0x19c>)
 80002c4:	4293      	cmp	r3, r2
 80002c6:	d15d      	bne.n	8000384 <GPIO_PeriClockControl+0x170>
        	GPIOH_PCLK_EN();
 80002c8:	4b32      	ldr	r3, [pc, #200]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 80002ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002cc:	4a31      	ldr	r2, [pc, #196]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 80002ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80002d2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002d4:	e056      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		if (pGPIOx == GPIOA)
 80002d6:	687b      	ldr	r3, [r7, #4]
 80002d8:	4a2d      	ldr	r2, [pc, #180]	@ (8000390 <GPIO_PeriClockControl+0x17c>)
 80002da:	4293      	cmp	r3, r2
 80002dc:	d106      	bne.n	80002ec <GPIO_PeriClockControl+0xd8>
			GPIOA_PCLK_DI();
 80002de:	4b2d      	ldr	r3, [pc, #180]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 80002e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002e2:	4a2c      	ldr	r2, [pc, #176]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 80002e4:	f023 0301 	bic.w	r3, r3, #1
 80002e8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80002ea:	e04b      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOB)
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a2a      	ldr	r2, [pc, #168]	@ (8000398 <GPIO_PeriClockControl+0x184>)
 80002f0:	4293      	cmp	r3, r2
 80002f2:	d106      	bne.n	8000302 <GPIO_PeriClockControl+0xee>
			GPIOB_PCLK_DI();
 80002f4:	4b27      	ldr	r3, [pc, #156]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 80002f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80002f8:	4a26      	ldr	r2, [pc, #152]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 80002fa:	f023 0302 	bic.w	r3, r3, #2
 80002fe:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000300:	e040      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOC)
 8000302:	687b      	ldr	r3, [r7, #4]
 8000304:	4a25      	ldr	r2, [pc, #148]	@ (800039c <GPIO_PeriClockControl+0x188>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d106      	bne.n	8000318 <GPIO_PeriClockControl+0x104>
			GPIOC_PCLK_DI();
 800030a:	4b22      	ldr	r3, [pc, #136]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 800030c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800030e:	4a21      	ldr	r2, [pc, #132]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000310:	f023 0304 	bic.w	r3, r3, #4
 8000314:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000316:	e035      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOD)
 8000318:	687b      	ldr	r3, [r7, #4]
 800031a:	4a21      	ldr	r2, [pc, #132]	@ (80003a0 <GPIO_PeriClockControl+0x18c>)
 800031c:	4293      	cmp	r3, r2
 800031e:	d106      	bne.n	800032e <GPIO_PeriClockControl+0x11a>
			GPIOD_PCLK_DI();
 8000320:	4b1c      	ldr	r3, [pc, #112]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000322:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000324:	4a1b      	ldr	r2, [pc, #108]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000326:	f023 0308 	bic.w	r3, r3, #8
 800032a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800032c:	e02a      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOE)
 800032e:	687b      	ldr	r3, [r7, #4]
 8000330:	4a1c      	ldr	r2, [pc, #112]	@ (80003a4 <GPIO_PeriClockControl+0x190>)
 8000332:	4293      	cmp	r3, r2
 8000334:	d106      	bne.n	8000344 <GPIO_PeriClockControl+0x130>
			GPIOE_PCLK_DI();
 8000336:	4b17      	ldr	r3, [pc, #92]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000338:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800033a:	4a16      	ldr	r2, [pc, #88]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 800033c:	f023 0310 	bic.w	r3, r3, #16
 8000340:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000342:	e01f      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOF)
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	4a18      	ldr	r2, [pc, #96]	@ (80003a8 <GPIO_PeriClockControl+0x194>)
 8000348:	4293      	cmp	r3, r2
 800034a:	d106      	bne.n	800035a <GPIO_PeriClockControl+0x146>
			GPIOF_PCLK_DI();
 800034c:	4b11      	ldr	r3, [pc, #68]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 800034e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000350:	4a10      	ldr	r2, [pc, #64]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000352:	f023 0320 	bic.w	r3, r3, #32
 8000356:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000358:	e014      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOG)
 800035a:	687b      	ldr	r3, [r7, #4]
 800035c:	4a13      	ldr	r2, [pc, #76]	@ (80003ac <GPIO_PeriClockControl+0x198>)
 800035e:	4293      	cmp	r3, r2
 8000360:	d106      	bne.n	8000370 <GPIO_PeriClockControl+0x15c>
			GPIOG_PCLK_DI();
 8000362:	4b0c      	ldr	r3, [pc, #48]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000364:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000366:	4a0b      	ldr	r2, [pc, #44]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 8000368:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800036c:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800036e:	e009      	b.n	8000384 <GPIO_PeriClockControl+0x170>
		else if (pGPIOx == GPIOH)
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	4a0f      	ldr	r2, [pc, #60]	@ (80003b0 <GPIO_PeriClockControl+0x19c>)
 8000374:	4293      	cmp	r3, r2
 8000376:	d105      	bne.n	8000384 <GPIO_PeriClockControl+0x170>
			GPIOH_PCLK_DI();
 8000378:	4b06      	ldr	r3, [pc, #24]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 800037a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800037c:	4a05      	ldr	r2, [pc, #20]	@ (8000394 <GPIO_PeriClockControl+0x180>)
 800037e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8000382:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000384:	bf00      	nop
 8000386:	370c      	adds	r7, #12
 8000388:	46bd      	mov	sp, r7
 800038a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038e:	4770      	bx	lr
 8000390:	40020000 	.word	0x40020000
 8000394:	40023800 	.word	0x40023800
 8000398:	40020400 	.word	0x40020400
 800039c:	40020800 	.word	0x40020800
 80003a0:	40020c00 	.word	0x40020c00
 80003a4:	40021000 	.word	0x40021000
 80003a8:	40021400 	.word	0x40021400
 80003ac:	40021800 	.word	0x40021800
 80003b0:	40021c00 	.word	0x40021c00

080003b4 <GPIO_Init>:
 * @return						- none
 *
 * @note						- none
 *************************************************************************************************************************************************/
void GPIO_Init (GPIO_Handle_t *pGPIOHandle)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b086      	sub	sp, #24
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
	uint32_t temp = 0; //temp. register
 80003bc:	2300      	movs	r3, #0
 80003be:	617b      	str	r3, [r7, #20]
	uint8_t temp1 = 0;
 80003c0:	2300      	movs	r3, #0
 80003c2:	74fb      	strb	r3, [r7, #19]
	uint8_t temp2 = 0;
 80003c4:	2300      	movs	r3, #0
 80003c6:	74bb      	strb	r3, [r7, #18]
	uint8_t portcode = 0;
 80003c8:	2300      	movs	r3, #0
 80003ca:	747b      	strb	r3, [r7, #17]

	/* Enable the peripheral clock */
	GPIO_PeriClockControl((pGPIOHandle->pGPIOx), ENABLE);
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	2101      	movs	r1, #1
 80003d2:	4618      	mov	r0, r3
 80003d4:	f7ff ff1e 	bl	8000214 <GPIO_PeriClockControl>
	/* configure the mode of gpio pin*/
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003d8:	687b      	ldr	r3, [r7, #4]
 80003da:	795b      	ldrb	r3, [r3, #5]
 80003dc:	2b03      	cmp	r3, #3
 80003de:	d81f      	bhi.n	8000420 <GPIO_Init+0x6c>
    {
		/* The non interrupt mode */
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003e0:	687b      	ldr	r3, [r7, #4]
 80003e2:	795b      	ldrb	r3, [r3, #5]
 80003e4:	461a      	mov	r2, r3
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	791b      	ldrb	r3, [r3, #4]
 80003ea:	005b      	lsls	r3, r3, #1
 80003ec:	fa02 f303 	lsl.w	r3, r2, r3
 80003f0:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); /* clearing bits before setting it*/
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	681a      	ldr	r2, [r3, #0]
 80003f8:	687b      	ldr	r3, [r7, #4]
 80003fa:	791b      	ldrb	r3, [r3, #4]
 80003fc:	4619      	mov	r1, r3
 80003fe:	2303      	movs	r3, #3
 8000400:	408b      	lsls	r3, r1
 8000402:	43db      	mvns	r3, r3
 8000404:	4619      	mov	r1, r3
 8000406:	687b      	ldr	r3, [r7, #4]
 8000408:	681b      	ldr	r3, [r3, #0]
 800040a:	400a      	ands	r2, r1
 800040c:	601a      	str	r2, [r3, #0]
      	pGPIOHandle->pGPIOx->MODER |= temp; /* setting the bit*/
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	6819      	ldr	r1, [r3, #0]
 8000414:	687b      	ldr	r3, [r7, #4]
 8000416:	681b      	ldr	r3, [r3, #0]
 8000418:	697a      	ldr	r2, [r7, #20]
 800041a:	430a      	orrs	r2, r1
 800041c:	601a      	str	r2, [r3, #0]
 800041e:	e0c2      	b.n	80005a6 <GPIO_Init+0x1f2>
    }
	else
    {

		/* The interrupt mode */
		if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_FT)
 8000420:	687b      	ldr	r3, [r7, #4]
 8000422:	795b      	ldrb	r3, [r3, #5]
 8000424:	2b04      	cmp	r3, #4
 8000426:	d117      	bne.n	8000458 <GPIO_Init+0xa4>
		{
			/* Configure the FTSR */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000428:	4b47      	ldr	r3, [pc, #284]	@ (8000548 <GPIO_Init+0x194>)
 800042a:	68db      	ldr	r3, [r3, #12]
 800042c:	687a      	ldr	r2, [r7, #4]
 800042e:	7912      	ldrb	r2, [r2, #4]
 8000430:	4611      	mov	r1, r2
 8000432:	2201      	movs	r2, #1
 8000434:	408a      	lsls	r2, r1
 8000436:	4611      	mov	r1, r2
 8000438:	4a43      	ldr	r2, [pc, #268]	@ (8000548 <GPIO_Init+0x194>)
 800043a:	430b      	orrs	r3, r1
 800043c:	60d3      	str	r3, [r2, #12]
			/* Clear the coresponding RTSR bit*/
			EXTI->RTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800043e:	4b42      	ldr	r3, [pc, #264]	@ (8000548 <GPIO_Init+0x194>)
 8000440:	689b      	ldr	r3, [r3, #8]
 8000442:	687a      	ldr	r2, [r7, #4]
 8000444:	7912      	ldrb	r2, [r2, #4]
 8000446:	4611      	mov	r1, r2
 8000448:	2201      	movs	r2, #1
 800044a:	408a      	lsls	r2, r1
 800044c:	43d2      	mvns	r2, r2
 800044e:	4611      	mov	r1, r2
 8000450:	4a3d      	ldr	r2, [pc, #244]	@ (8000548 <GPIO_Init+0x194>)
 8000452:	400b      	ands	r3, r1
 8000454:	6093      	str	r3, [r2, #8]
 8000456:	e035      	b.n	80004c4 <GPIO_Init+0x110>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RT)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	795b      	ldrb	r3, [r3, #5]
 800045c:	2b05      	cmp	r3, #5
 800045e:	d117      	bne.n	8000490 <GPIO_Init+0xdc>
		{
			/* Configure the RTSR */
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000460:	4b39      	ldr	r3, [pc, #228]	@ (8000548 <GPIO_Init+0x194>)
 8000462:	689b      	ldr	r3, [r3, #8]
 8000464:	687a      	ldr	r2, [r7, #4]
 8000466:	7912      	ldrb	r2, [r2, #4]
 8000468:	4611      	mov	r1, r2
 800046a:	2201      	movs	r2, #1
 800046c:	408a      	lsls	r2, r1
 800046e:	4611      	mov	r1, r2
 8000470:	4a35      	ldr	r2, [pc, #212]	@ (8000548 <GPIO_Init+0x194>)
 8000472:	430b      	orrs	r3, r1
 8000474:	6093      	str	r3, [r2, #8]
			/* Clear the coresponding RTSR bit*/
			EXTI->FTSR &= ~(1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000476:	4b34      	ldr	r3, [pc, #208]	@ (8000548 <GPIO_Init+0x194>)
 8000478:	68db      	ldr	r3, [r3, #12]
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	7912      	ldrb	r2, [r2, #4]
 800047e:	4611      	mov	r1, r2
 8000480:	2201      	movs	r2, #1
 8000482:	408a      	lsls	r2, r1
 8000484:	43d2      	mvns	r2, r2
 8000486:	4611      	mov	r1, r2
 8000488:	4a2f      	ldr	r2, [pc, #188]	@ (8000548 <GPIO_Init+0x194>)
 800048a:	400b      	ands	r3, r1
 800048c:	60d3      	str	r3, [r2, #12]
 800048e:	e019      	b.n	80004c4 <GPIO_Init+0x110>
		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT)
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	795b      	ldrb	r3, [r3, #5]
 8000494:	2b06      	cmp	r3, #6
 8000496:	d115      	bne.n	80004c4 <GPIO_Init+0x110>
		{
			/* Configure both RFSR and RTSR */
			EXTI->FTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000498:	4b2b      	ldr	r3, [pc, #172]	@ (8000548 <GPIO_Init+0x194>)
 800049a:	68db      	ldr	r3, [r3, #12]
 800049c:	687a      	ldr	r2, [r7, #4]
 800049e:	7912      	ldrb	r2, [r2, #4]
 80004a0:	4611      	mov	r1, r2
 80004a2:	2201      	movs	r2, #1
 80004a4:	408a      	lsls	r2, r1
 80004a6:	4611      	mov	r1, r2
 80004a8:	4a27      	ldr	r2, [pc, #156]	@ (8000548 <GPIO_Init+0x194>)
 80004aa:	430b      	orrs	r3, r1
 80004ac:	60d3      	str	r3, [r2, #12]
			EXTI->RTSR |= (1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004ae:	4b26      	ldr	r3, [pc, #152]	@ (8000548 <GPIO_Init+0x194>)
 80004b0:	689b      	ldr	r3, [r3, #8]
 80004b2:	687a      	ldr	r2, [r7, #4]
 80004b4:	7912      	ldrb	r2, [r2, #4]
 80004b6:	4611      	mov	r1, r2
 80004b8:	2201      	movs	r2, #1
 80004ba:	408a      	lsls	r2, r1
 80004bc:	4611      	mov	r1, r2
 80004be:	4a22      	ldr	r2, [pc, #136]	@ (8000548 <GPIO_Init+0x194>)
 80004c0:	430b      	orrs	r3, r1
 80004c2:	6093      	str	r3, [r2, #8]
		}
		/* configure the GPIO port selection in SYSCFG_EXTICR */
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4;
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	791b      	ldrb	r3, [r3, #4]
 80004c8:	089b      	lsrs	r3, r3, #2
 80004ca:	74fb      	strb	r3, [r7, #19]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	791b      	ldrb	r3, [r3, #4]
 80004d0:	f003 0303 	and.w	r3, r3, #3
 80004d4:	74bb      	strb	r3, [r7, #18]
		portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004d6:	687b      	ldr	r3, [r7, #4]
 80004d8:	681b      	ldr	r3, [r3, #0]
 80004da:	4a1c      	ldr	r2, [pc, #112]	@ (800054c <GPIO_Init+0x198>)
 80004dc:	4293      	cmp	r3, r2
 80004de:	d045      	beq.n	800056c <GPIO_Init+0x1b8>
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a1a      	ldr	r2, [pc, #104]	@ (8000550 <GPIO_Init+0x19c>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d02b      	beq.n	8000542 <GPIO_Init+0x18e>
 80004ea:	687b      	ldr	r3, [r7, #4]
 80004ec:	681b      	ldr	r3, [r3, #0]
 80004ee:	4a19      	ldr	r2, [pc, #100]	@ (8000554 <GPIO_Init+0x1a0>)
 80004f0:	4293      	cmp	r3, r2
 80004f2:	d024      	beq.n	800053e <GPIO_Init+0x18a>
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a17      	ldr	r2, [pc, #92]	@ (8000558 <GPIO_Init+0x1a4>)
 80004fa:	4293      	cmp	r3, r2
 80004fc:	d01d      	beq.n	800053a <GPIO_Init+0x186>
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4a16      	ldr	r2, [pc, #88]	@ (800055c <GPIO_Init+0x1a8>)
 8000504:	4293      	cmp	r3, r2
 8000506:	d016      	beq.n	8000536 <GPIO_Init+0x182>
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a14      	ldr	r2, [pc, #80]	@ (8000560 <GPIO_Init+0x1ac>)
 800050e:	4293      	cmp	r3, r2
 8000510:	d00f      	beq.n	8000532 <GPIO_Init+0x17e>
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	681b      	ldr	r3, [r3, #0]
 8000516:	4a13      	ldr	r2, [pc, #76]	@ (8000564 <GPIO_Init+0x1b0>)
 8000518:	4293      	cmp	r3, r2
 800051a:	d008      	beq.n	800052e <GPIO_Init+0x17a>
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	681b      	ldr	r3, [r3, #0]
 8000520:	4a11      	ldr	r2, [pc, #68]	@ (8000568 <GPIO_Init+0x1b4>)
 8000522:	4293      	cmp	r3, r2
 8000524:	d101      	bne.n	800052a <GPIO_Init+0x176>
 8000526:	2307      	movs	r3, #7
 8000528:	e021      	b.n	800056e <GPIO_Init+0x1ba>
 800052a:	2300      	movs	r3, #0
 800052c:	e01f      	b.n	800056e <GPIO_Init+0x1ba>
 800052e:	2306      	movs	r3, #6
 8000530:	e01d      	b.n	800056e <GPIO_Init+0x1ba>
 8000532:	2305      	movs	r3, #5
 8000534:	e01b      	b.n	800056e <GPIO_Init+0x1ba>
 8000536:	2304      	movs	r3, #4
 8000538:	e019      	b.n	800056e <GPIO_Init+0x1ba>
 800053a:	2303      	movs	r3, #3
 800053c:	e017      	b.n	800056e <GPIO_Init+0x1ba>
 800053e:	2302      	movs	r3, #2
 8000540:	e015      	b.n	800056e <GPIO_Init+0x1ba>
 8000542:	2301      	movs	r3, #1
 8000544:	e013      	b.n	800056e <GPIO_Init+0x1ba>
 8000546:	bf00      	nop
 8000548:	40013c00 	.word	0x40013c00
 800054c:	40020000 	.word	0x40020000
 8000550:	40020400 	.word	0x40020400
 8000554:	40020800 	.word	0x40020800
 8000558:	40020c00 	.word	0x40020c00
 800055c:	40021000 	.word	0x40021000
 8000560:	40021400 	.word	0x40021400
 8000564:	40021800 	.word	0x40021800
 8000568:	40021c00 	.word	0x40021c00
 800056c:	2300      	movs	r3, #0
 800056e:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000570:	4b5b      	ldr	r3, [pc, #364]	@ (80006e0 <GPIO_Init+0x32c>)
 8000572:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000574:	4a5a      	ldr	r2, [pc, #360]	@ (80006e0 <GPIO_Init+0x32c>)
 8000576:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800057a:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << temp2 * 4;
 800057c:	7c7a      	ldrb	r2, [r7, #17]
 800057e:	7cbb      	ldrb	r3, [r7, #18]
 8000580:	009b      	lsls	r3, r3, #2
 8000582:	fa02 f103 	lsl.w	r1, r2, r3
 8000586:	4a57      	ldr	r2, [pc, #348]	@ (80006e4 <GPIO_Init+0x330>)
 8000588:	7cfb      	ldrb	r3, [r7, #19]
 800058a:	3302      	adds	r3, #2
 800058c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		/* enable the exti interrupt delivery using IMR */
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000590:	4b55      	ldr	r3, [pc, #340]	@ (80006e8 <GPIO_Init+0x334>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	7912      	ldrb	r2, [r2, #4]
 8000598:	4611      	mov	r1, r2
 800059a:	2201      	movs	r2, #1
 800059c:	408a      	lsls	r2, r1
 800059e:	4611      	mov	r1, r2
 80005a0:	4a51      	ldr	r2, [pc, #324]	@ (80006e8 <GPIO_Init+0x334>)
 80005a2:	430b      	orrs	r3, r1
 80005a4:	6013      	str	r3, [r2, #0]
    }
	/* configure the speed*/
	temp = 0;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	799b      	ldrb	r3, [r3, #6]
 80005ae:	461a      	mov	r2, r3
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	791b      	ldrb	r3, [r3, #4]
 80005b4:	005b      	lsls	r3, r3, #1
 80005b6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ba:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	689a      	ldr	r2, [r3, #8]
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	791b      	ldrb	r3, [r3, #4]
 80005c6:	4619      	mov	r1, r3
 80005c8:	2303      	movs	r3, #3
 80005ca:	408b      	lsls	r3, r1
 80005cc:	43db      	mvns	r3, r3
 80005ce:	4619      	mov	r1, r3
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	400a      	ands	r2, r1
 80005d6:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDER |= temp;
 80005d8:	687b      	ldr	r3, [r7, #4]
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	6899      	ldr	r1, [r3, #8]
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	697a      	ldr	r2, [r7, #20]
 80005e4:	430a      	orrs	r2, r1
 80005e6:	609a      	str	r2, [r3, #8]
	/* configure the pupd settings*/
	temp = 0;
 80005e8:	2300      	movs	r3, #0
 80005ea:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	79db      	ldrb	r3, [r3, #7]
 80005f0:	461a      	mov	r2, r3
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	791b      	ldrb	r3, [r3, #4]
 80005f6:	005b      	lsls	r3, r3, #1
 80005f8:	fa02 f303 	lsl.w	r3, r2, r3
 80005fc:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	681b      	ldr	r3, [r3, #0]
 8000602:	68da      	ldr	r2, [r3, #12]
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	791b      	ldrb	r3, [r3, #4]
 8000608:	4619      	mov	r1, r3
 800060a:	2303      	movs	r3, #3
 800060c:	408b      	lsls	r3, r1
 800060e:	43db      	mvns	r3, r3
 8000610:	4619      	mov	r1, r3
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	400a      	ands	r2, r1
 8000618:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	681b      	ldr	r3, [r3, #0]
 800061e:	68d9      	ldr	r1, [r3, #12]
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	681b      	ldr	r3, [r3, #0]
 8000624:	697a      	ldr	r2, [r7, #20]
 8000626:	430a      	orrs	r2, r1
 8000628:	60da      	str	r2, [r3, #12]
	/* configure the optype*/ //TODO: configure only in output mode
	temp = 0;
 800062a:	2300      	movs	r3, #0
 800062c:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	7a1b      	ldrb	r3, [r3, #8]
 8000632:	461a      	mov	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	791b      	ldrb	r3, [r3, #4]
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	fa02 f303 	lsl.w	r3, r2, r3
 800063e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~(0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	685a      	ldr	r2, [r3, #4]
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	791b      	ldrb	r3, [r3, #4]
 800064a:	4619      	mov	r1, r3
 800064c:	2303      	movs	r3, #3
 800064e:	408b      	lsls	r3, r1
 8000650:	43db      	mvns	r3, r3
 8000652:	4619      	mov	r1, r3
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	400a      	ands	r2, r1
 800065a:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	6859      	ldr	r1, [r3, #4]
 8000662:	687b      	ldr	r3, [r7, #4]
 8000664:	681b      	ldr	r3, [r3, #0]
 8000666:	697a      	ldr	r2, [r7, #20]
 8000668:	430a      	orrs	r2, r1
 800066a:	605a      	str	r2, [r3, #4]
	/* configure the alt functionality*/
	if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	795b      	ldrb	r3, [r3, #5]
 8000670:	2b02      	cmp	r3, #2
 8000672:	d131      	bne.n	80006d8 <GPIO_Init+0x324>
    {
		uint8_t temp1;
		uint8_t temp2;
		/* selecting the register AFR[0] (AFRL) or AFR[1] (AFRH) */
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	791b      	ldrb	r3, [r3, #4]
 8000678:	08db      	lsrs	r3, r3, #3
 800067a:	743b      	strb	r3, [r7, #16]
		/* selecting the bit position*/
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	791b      	ldrb	r3, [r3, #4]
 8000680:	f003 0307 	and.w	r3, r3, #7
 8000684:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2));
 8000686:	687b      	ldr	r3, [r7, #4]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	7c3a      	ldrb	r2, [r7, #16]
 800068c:	3208      	adds	r2, #8
 800068e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000692:	7bfb      	ldrb	r3, [r7, #15]
 8000694:	009b      	lsls	r3, r3, #2
 8000696:	220f      	movs	r2, #15
 8000698:	fa02 f303 	lsl.w	r3, r2, r3
 800069c:	43db      	mvns	r3, r3
 800069e:	4618      	mov	r0, r3
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	7c3a      	ldrb	r2, [r7, #16]
 80006a6:	4001      	ands	r1, r0
 80006a8:	3208      	adds	r2, #8
 80006aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2));
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	7c3a      	ldrb	r2, [r7, #16]
 80006b4:	3208      	adds	r2, #8
 80006b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006ba:	687b      	ldr	r3, [r7, #4]
 80006bc:	7a5b      	ldrb	r3, [r3, #9]
 80006be:	461a      	mov	r2, r3
 80006c0:	7bfb      	ldrb	r3, [r7, #15]
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	fa02 f303 	lsl.w	r3, r2, r3
 80006c8:	4618      	mov	r0, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	7c3a      	ldrb	r2, [r7, #16]
 80006d0:	4301      	orrs	r1, r0
 80006d2:	3208      	adds	r2, #8
 80006d4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    }
}
 80006d8:	bf00      	nop
 80006da:	3718      	adds	r7, #24
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40013800 	.word	0x40013800
 80006e8:	40013c00 	.word	0x40013c00

080006ec <GPIO_ReadFromInputPin>:
 * @return						- 0 or 1
 *
 * @note						- none
 *************************************************************************************************************************************************/
uint8_t GPIO_ReadFromInputPin (GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80006ec:	b480      	push	{r7}
 80006ee:	b085      	sub	sp, #20
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
 80006f4:	460b      	mov	r3, r1
 80006f6:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t) ((pGPIOx->IDR >> PinNumber) & 0x00000001);
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	691a      	ldr	r2, [r3, #16]
 80006fc:	78fb      	ldrb	r3, [r7, #3]
 80006fe:	fa22 f303 	lsr.w	r3, r2, r3
 8000702:	b2db      	uxtb	r3, r3
 8000704:	f003 0301 	and.w	r3, r3, #1
 8000708:	73fb      	strb	r3, [r7, #15]
	return value;
 800070a:	7bfb      	ldrb	r3, [r7, #15]
}
 800070c:	4618      	mov	r0, r3
 800070e:	3714      	adds	r7, #20
 8000710:	46bd      	mov	sp, r7
 8000712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000716:	4770      	bx	lr

08000718 <SPI_PeriClockControl>:
 * @return						- none
 *
 * @note						- none
 *************************************************************************************************************************************************/
void SPI_PeriClockControl (SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
 8000720:	460b      	mov	r3, r1
 8000722:	70fb      	strb	r3, [r7, #3]
	if (EnorDi == ENABLE)
 8000724:	78fb      	ldrb	r3, [r7, #3]
 8000726:	2b01      	cmp	r3, #1
 8000728:	d12b      	bne.n	8000782 <SPI_PeriClockControl+0x6a>
    {
		if (pSPIx == SPI1)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4a2d      	ldr	r2, [pc, #180]	@ (80007e4 <SPI_PeriClockControl+0xcc>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d106      	bne.n	8000740 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000732:	4b2d      	ldr	r3, [pc, #180]	@ (80007e8 <SPI_PeriClockControl+0xd0>)
 8000734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000736:	4a2c      	ldr	r2, [pc, #176]	@ (80007e8 <SPI_PeriClockControl+0xd0>)
 8000738:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800073c:	6453      	str	r3, [r2, #68]	@ 0x44
		else if (pSPIx == SPI4)
		{
			SPI4_PCLK_DI();
		}
    }
}
 800073e:	e04b      	b.n	80007d8 <SPI_PeriClockControl+0xc0>
		else if (pSPIx == SPI2)
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	4a2a      	ldr	r2, [pc, #168]	@ (80007ec <SPI_PeriClockControl+0xd4>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d106      	bne.n	8000756 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000748:	4b27      	ldr	r3, [pc, #156]	@ (80007e8 <SPI_PeriClockControl+0xd0>)
 800074a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800074c:	4a26      	ldr	r2, [pc, #152]	@ (80007e8 <SPI_PeriClockControl+0xd0>)
 800074e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000752:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000754:	e040      	b.n	80007d8 <SPI_PeriClockControl+0xc0>
		else if (pSPIx == SPI3)
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	4a25      	ldr	r2, [pc, #148]	@ (80007f0 <SPI_PeriClockControl+0xd8>)
 800075a:	4293      	cmp	r3, r2
 800075c:	d106      	bne.n	800076c <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 800075e:	4b22      	ldr	r3, [pc, #136]	@ (80007e8 <SPI_PeriClockControl+0xd0>)
 8000760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000762:	4a21      	ldr	r2, [pc, #132]	@ (80007e8 <SPI_PeriClockControl+0xd0>)
 8000764:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000768:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800076a:	e035      	b.n	80007d8 <SPI_PeriClockControl+0xc0>
		else if (pSPIx == SPI4)
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	4a21      	ldr	r2, [pc, #132]	@ (80007f4 <SPI_PeriClockControl+0xdc>)
 8000770:	4293      	cmp	r3, r2
 8000772:	d131      	bne.n	80007d8 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 8000774:	4b1c      	ldr	r3, [pc, #112]	@ (80007e8 <SPI_PeriClockControl+0xd0>)
 8000776:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000778:	4a1b      	ldr	r2, [pc, #108]	@ (80007e8 <SPI_PeriClockControl+0xd0>)
 800077a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800077e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000780:	e02a      	b.n	80007d8 <SPI_PeriClockControl+0xc0>
		if (pSPIx == SPI1)
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	4a17      	ldr	r2, [pc, #92]	@ (80007e4 <SPI_PeriClockControl+0xcc>)
 8000786:	4293      	cmp	r3, r2
 8000788:	d106      	bne.n	8000798 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 800078a:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <SPI_PeriClockControl+0xd0>)
 800078c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800078e:	4a16      	ldr	r2, [pc, #88]	@ (80007e8 <SPI_PeriClockControl+0xd0>)
 8000790:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8000794:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000796:	e01f      	b.n	80007d8 <SPI_PeriClockControl+0xc0>
		else if (pSPIx == SPI2)
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	4a14      	ldr	r2, [pc, #80]	@ (80007ec <SPI_PeriClockControl+0xd4>)
 800079c:	4293      	cmp	r3, r2
 800079e:	d106      	bne.n	80007ae <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 80007a0:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <SPI_PeriClockControl+0xd0>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007a4:	4a10      	ldr	r2, [pc, #64]	@ (80007e8 <SPI_PeriClockControl+0xd0>)
 80007a6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80007aa:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007ac:	e014      	b.n	80007d8 <SPI_PeriClockControl+0xc0>
		else if (pSPIx == SPI3)
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	4a0f      	ldr	r2, [pc, #60]	@ (80007f0 <SPI_PeriClockControl+0xd8>)
 80007b2:	4293      	cmp	r3, r2
 80007b4:	d106      	bne.n	80007c4 <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 80007b6:	4b0c      	ldr	r3, [pc, #48]	@ (80007e8 <SPI_PeriClockControl+0xd0>)
 80007b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ba:	4a0b      	ldr	r2, [pc, #44]	@ (80007e8 <SPI_PeriClockControl+0xd0>)
 80007bc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80007c0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007c2:	e009      	b.n	80007d8 <SPI_PeriClockControl+0xc0>
		else if (pSPIx == SPI4)
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a0b      	ldr	r2, [pc, #44]	@ (80007f4 <SPI_PeriClockControl+0xdc>)
 80007c8:	4293      	cmp	r3, r2
 80007ca:	d105      	bne.n	80007d8 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 80007cc:	4b06      	ldr	r3, [pc, #24]	@ (80007e8 <SPI_PeriClockControl+0xd0>)
 80007ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007d0:	4a05      	ldr	r2, [pc, #20]	@ (80007e8 <SPI_PeriClockControl+0xd0>)
 80007d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80007d6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr
 80007e4:	40013000 	.word	0x40013000
 80007e8:	40023800 	.word	0x40023800
 80007ec:	40003800 	.word	0x40003800
 80007f0:	40003c00 	.word	0x40003c00
 80007f4:	40013400 	.word	0x40013400

080007f8 <SPI_Init>:
 * @return						- none
 *
 * @note						- none
 *************************************************************************************************************************************************/
void SPI_Init (SPI_Handle_t *pSPIHandle)
{
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	/* Configure the SPI_CR1 register */
	uint32_t tempreg = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
	/* Enable the peripheral clock */
	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	2101      	movs	r1, #1
 800080a:	4618      	mov	r0, r3
 800080c:	f7ff ff84 	bl	8000718 <SPI_PeriClockControl>
	/* Configure the device mode */
	tempreg |= pSPIHandle->SPI_Config.SPI_DeviceMode << SPI_CR1_MSTR;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	791b      	ldrb	r3, [r3, #4]
 8000814:	009b      	lsls	r3, r3, #2
 8000816:	68fa      	ldr	r2, [r7, #12]
 8000818:	4313      	orrs	r3, r2
 800081a:	60fb      	str	r3, [r7, #12]
	/* Configure the bus config */
	if ( pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_FD )
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	795b      	ldrb	r3, [r3, #5]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d104      	bne.n	800082e <SPI_Init+0x36>
	{
		/* bidi mode should be cleared */
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE );
 8000824:	68fb      	ldr	r3, [r7, #12]
 8000826:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800082a:	60fb      	str	r3, [r7, #12]
 800082c:	e014      	b.n	8000858 <SPI_Init+0x60>
	}
	else if ( pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_HD )
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	795b      	ldrb	r3, [r3, #5]
 8000832:	2b02      	cmp	r3, #2
 8000834:	d104      	bne.n	8000840 <SPI_Init+0x48>
	{
		/* bidi mode should be set */
		tempreg |= ( 1 << SPI_CR1_BIDIMODE );
 8000836:	68fb      	ldr	r3, [r7, #12]
 8000838:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800083c:	60fb      	str	r3, [r7, #12]
 800083e:	e00b      	b.n	8000858 <SPI_Init+0x60>
	}
	else if ( pSPIHandle->SPI_Config.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY )
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	795b      	ldrb	r3, [r3, #5]
 8000844:	2b03      	cmp	r3, #3
 8000846:	d107      	bne.n	8000858 <SPI_Init+0x60>
	{
		/* bidi mode should be cleared */
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE );
 8000848:	68fb      	ldr	r3, [r7, #12]
 800084a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800084e:	60fb      	str	r3, [r7, #12]
		/* and rxonly bit must be set */
		tempreg |= ( 1 << SPI_CR1_RXONLY );
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000856:	60fb      	str	r3, [r7, #12]
	}
	/* Configure the spi serial clock speed (baud rate) */
	tempreg |= pSPIHandle->SPI_Config.SPI_SclkSpeed << SPI_CR1_BR;
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	799b      	ldrb	r3, [r3, #6]
 800085c:	00db      	lsls	r3, r3, #3
 800085e:	68fa      	ldr	r2, [r7, #12]
 8000860:	4313      	orrs	r3, r2
 8000862:	60fb      	str	r3, [r7, #12]

	/* Configure the DFF */
	tempreg |=pSPIHandle->SPI_Config.SPI_DFF << SPI_CR1_DFF;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	79db      	ldrb	r3, [r3, #7]
 8000868:	02db      	lsls	r3, r3, #11
 800086a:	68fa      	ldr	r2, [r7, #12]
 800086c:	4313      	orrs	r3, r2
 800086e:	60fb      	str	r3, [r7, #12]

	/* Configure the CPOL */
	tempreg |=pSPIHandle->SPI_Config.SPI_CPOL << SPI_CR1_CPOL;
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	7a1b      	ldrb	r3, [r3, #8]
 8000874:	005b      	lsls	r3, r3, #1
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	4313      	orrs	r3, r2
 800087a:	60fb      	str	r3, [r7, #12]

	/* Configure the CPHA */
	tempreg |=pSPIHandle->SPI_Config.SPI_CPHA << SPI_CR1_CPHA;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	7a5b      	ldrb	r3, [r3, #9]
 8000880:	461a      	mov	r2, r3
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	4313      	orrs	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]

	/* Save values in CR1 register */
	pSPIHandle->pSPIx->CR1 = tempreg;
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	681b      	ldr	r3, [r3, #0]
 800088c:	68fa      	ldr	r2, [r7, #12]
 800088e:	601a      	str	r2, [r3, #0]
}
 8000890:	bf00      	nop
 8000892:	3710      	adds	r7, #16
 8000894:	46bd      	mov	sp, r7
 8000896:	bd80      	pop	{r7, pc}

08000898 <SPI_SendData>:
 * @return						- none
 *
 * @note						- This is a blocking call
 *************************************************************************************************************************************************/
void SPI_SendData (SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Length)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	60f8      	str	r0, [r7, #12]
 80008a0:	60b9      	str	r1, [r7, #8]
 80008a2:	607a      	str	r2, [r7, #4]
	while( Length > 0 )
 80008a4:	e027      	b.n	80008f6 <SPI_SendData+0x5e>
	{
		/* Wait until TXE is set */
		while( SPI_GetFlagStatus(pSPIx, SPI_TXE_FLAG) == FLAG_RESET);
 80008a6:	bf00      	nop
 80008a8:	2102      	movs	r1, #2
 80008aa:	68f8      	ldr	r0, [r7, #12]
 80008ac:	f000 f82b 	bl	8000906 <SPI_GetFlagStatus>
 80008b0:	4603      	mov	r3, r0
 80008b2:	2b00      	cmp	r3, #0
 80008b4:	d0f8      	beq.n	80008a8 <SPI_SendData+0x10>
		/* Check the DFF bit in CR1 */
		if(pSPIx->CR1 & ( 1 << SPI_CR1_DFF ) )
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d00e      	beq.n	80008e0 <SPI_SendData+0x48>
		{
			/* 16 bit DFF*/
			/* load the data into the DR */
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 80008c2:	68bb      	ldr	r3, [r7, #8]
 80008c4:	881b      	ldrh	r3, [r3, #0]
 80008c6:	461a      	mov	r2, r3
 80008c8:	68fb      	ldr	r3, [r7, #12]
 80008ca:	60da      	str	r2, [r3, #12]
			Length--;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	3b01      	subs	r3, #1
 80008d0:	607b      	str	r3, [r7, #4]
			Length--;
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	3b01      	subs	r3, #1
 80008d6:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 80008d8:	68bb      	ldr	r3, [r7, #8]
 80008da:	3301      	adds	r3, #1
 80008dc:	60bb      	str	r3, [r7, #8]
 80008de:	e00a      	b.n	80008f6 <SPI_SendData+0x5e>
		}
		else
		{
			/* 8 bit DFF */
			pSPIx->DR = *pTxBuffer;
 80008e0:	68bb      	ldr	r3, [r7, #8]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	461a      	mov	r2, r3
 80008e6:	68fb      	ldr	r3, [r7, #12]
 80008e8:	60da      	str	r2, [r3, #12]
			Length--;
 80008ea:	687b      	ldr	r3, [r7, #4]
 80008ec:	3b01      	subs	r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80008f0:	68bb      	ldr	r3, [r7, #8]
 80008f2:	3301      	adds	r3, #1
 80008f4:	60bb      	str	r3, [r7, #8]
	while( Length > 0 )
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d1d4      	bne.n	80008a6 <SPI_SendData+0xe>
		}

	}
}
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	3710      	adds	r7, #16
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <SPI_GetFlagStatus>:
 * @return						- none
 *
 * @note						- local function
 *************************************************************************************************************************************************/
uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx, uint32_t FlagName)
{
 8000906:	b480      	push	{r7}
 8000908:	b083      	sub	sp, #12
 800090a:	af00      	add	r7, sp, #0
 800090c:	6078      	str	r0, [r7, #4]
 800090e:	6039      	str	r1, [r7, #0]
	if( pSPIx->SR & FlagName)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	689a      	ldr	r2, [r3, #8]
 8000914:	683b      	ldr	r3, [r7, #0]
 8000916:	4013      	ands	r3, r2
 8000918:	2b00      	cmp	r3, #0
 800091a:	d001      	beq.n	8000920 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 800091c:	2301      	movs	r3, #1
 800091e:	e000      	b.n	8000922 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000920:	2300      	movs	r3, #0


}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <SPI_PeripheralControl>:
 * @return						- none
 *
 * @note						-
 *************************************************************************************************************************************************/
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	460b      	mov	r3, r1
 8000938:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800093a:	78fb      	ldrb	r3, [r7, #3]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d106      	bne.n	800094e <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |= ( 1 << SPI_CR1_SPE );
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		pSPIx->CR1 &= ~( 1 << SPI_CR1_SPE );
	}
}
 800094c:	e005      	b.n	800095a <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &= ~( 1 << SPI_CR1_SPE );
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	601a      	str	r2, [r3, #0]
}
 800095a:	bf00      	nop
 800095c:	370c      	adds	r7, #12
 800095e:	46bd      	mov	sp, r7
 8000960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000964:	4770      	bx	lr

08000966 <SPI_SSOEConfig>:
 * @return						- none
 *
 * @note						-
 *************************************************************************************************************************************************/
void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000966:	b480      	push	{r7}
 8000968:	b083      	sub	sp, #12
 800096a:	af00      	add	r7, sp, #0
 800096c:	6078      	str	r0, [r7, #4]
 800096e:	460b      	mov	r3, r1
 8000970:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000972:	78fb      	ldrb	r3, [r7, #3]
 8000974:	2b01      	cmp	r3, #1
 8000976:	d106      	bne.n	8000986 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= ( 1 << SPI_CR2_SSOE );
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	685b      	ldr	r3, [r3, #4]
 800097c:	f043 0204 	orr.w	r2, r3, #4
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	605a      	str	r2, [r3, #4]
	}
	else
	{
		pSPIx->CR2 &= ~( 1 << SPI_CR2_SSOE );
	}
}
 8000984:	e005      	b.n	8000992 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~( 1 << SPI_CR2_SSOE );
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	685b      	ldr	r3, [r3, #4]
 800098a:	f023 0204 	bic.w	r2, r3, #4
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	605a      	str	r2, [r3, #4]
}
 8000992:	bf00      	nop
 8000994:	370c      	adds	r7, #12
 8000996:	46bd      	mov	sp, r7
 8000998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099c:	4770      	bx	lr
	...

080009a0 <main>:
	SPI2_SCK  -> PB13
	SPI2_MISO -> PB14
	SPI2_MOSI -> PB15 */

int main(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b084      	sub	sp, #16
 80009a4:	af00      	add	r7, sp, #0
	char user_data[]= "Hello World";
 80009a6:	4a20      	ldr	r2, [pc, #128]	@ (8000a28 <main+0x88>)
 80009a8:	1d3b      	adds	r3, r7, #4
 80009aa:	ca07      	ldmia	r2, {r0, r1, r2}
 80009ac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	uint8_t dataLength = strlen(user_data);
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	4618      	mov	r0, r3
 80009b4:	f7ff fc26 	bl	8000204 <strlen>
 80009b8:	4603      	mov	r3, r0
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	70fb      	strb	r3, [r7, #3]


	GPIO_ButtonInit();
 80009be:	f000 f895 	bl	8000aec <GPIO_ButtonInit>

	SPI2_GPIOInits();	/* This function is used to initialize the GPIO pins to behave as SPI2 pins*/
 80009c2:	f000 f84d 	bl	8000a60 <SPI2_GPIOInits>

	SPI2_Inits();
 80009c6:	f000 f873 	bl	8000ab0 <SPI2_Inits>

	SPI_SSOEConfig(SPI2,  ENABLE);
 80009ca:	2101      	movs	r1, #1
 80009cc:	4817      	ldr	r0, [pc, #92]	@ (8000a2c <main+0x8c>)
 80009ce:	f7ff ffca 	bl	8000966 <SPI_SSOEConfig>

	while(1)
	{
		while( GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) );
 80009d2:	bf00      	nop
 80009d4:	210d      	movs	r1, #13
 80009d6:	4816      	ldr	r0, [pc, #88]	@ (8000a30 <main+0x90>)
 80009d8:	f7ff fe88 	bl	80006ec <GPIO_ReadFromInputPin>
 80009dc:	4603      	mov	r3, r0
 80009de:	2b00      	cmp	r3, #0
 80009e0:	d1f8      	bne.n	80009d4 <main+0x34>

		delay();
 80009e2:	f000 f827 	bl	8000a34 <delay>

		/* enable the SPI2 peripheral */
		SPI_PeripheralControl(SPI2, ENABLE);
 80009e6:	2101      	movs	r1, #1
 80009e8:	4810      	ldr	r0, [pc, #64]	@ (8000a2c <main+0x8c>)
 80009ea:	f7ff ffa0 	bl	800092e <SPI_PeripheralControl>

		/* first send length information*/
		SPI_SendData(SPI2, &dataLength, 1);
 80009ee:	1cfb      	adds	r3, r7, #3
 80009f0:	2201      	movs	r2, #1
 80009f2:	4619      	mov	r1, r3
 80009f4:	480d      	ldr	r0, [pc, #52]	@ (8000a2c <main+0x8c>)
 80009f6:	f7ff ff4f 	bl	8000898 <SPI_SendData>

		/* send data */
		SPI_SendData(SPI2, (uint8_t*)user_data, strlen(user_data));
 80009fa:	1d3b      	adds	r3, r7, #4
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff fc01 	bl	8000204 <strlen>
 8000a02:	4602      	mov	r2, r0
 8000a04:	1d3b      	adds	r3, r7, #4
 8000a06:	4619      	mov	r1, r3
 8000a08:	4808      	ldr	r0, [pc, #32]	@ (8000a2c <main+0x8c>)
 8000a0a:	f7ff ff45 	bl	8000898 <SPI_SendData>

		while( SPI_GetFlagStatus(SPI2, SPI_BUSY_FLAG) );
 8000a0e:	bf00      	nop
 8000a10:	2180      	movs	r1, #128	@ 0x80
 8000a12:	4806      	ldr	r0, [pc, #24]	@ (8000a2c <main+0x8c>)
 8000a14:	f7ff ff77 	bl	8000906 <SPI_GetFlagStatus>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d1f8      	bne.n	8000a10 <main+0x70>

		/* disable the SPI2 peripheral */
		SPI_PeripheralControl(SPI2, DISABLE);
 8000a1e:	2100      	movs	r1, #0
 8000a20:	4802      	ldr	r0, [pc, #8]	@ (8000a2c <main+0x8c>)
 8000a22:	f7ff ff84 	bl	800092e <SPI_PeripheralControl>
		while( GPIO_ReadFromInputPin(GPIOC,GPIO_PIN_NO_13) );
 8000a26:	e7d4      	b.n	80009d2 <main+0x32>
 8000a28:	08000bd0 	.word	0x08000bd0
 8000a2c:	40003800 	.word	0x40003800
 8000a30:	40020800 	.word	0x40020800

08000a34 <delay>:
	return 0;
}
/*************************************************************************************************************************************************/

void delay(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b083      	sub	sp, #12
 8000a38:	af00      	add	r7, sp, #0
	for(uint32_t count = 0 ; count < 500000/2; count++);
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	607b      	str	r3, [r7, #4]
 8000a3e:	e002      	b.n	8000a46 <delay+0x12>
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	3301      	adds	r3, #1
 8000a44:	607b      	str	r3, [r7, #4]
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4a04      	ldr	r2, [pc, #16]	@ (8000a5c <delay+0x28>)
 8000a4a:	4293      	cmp	r3, r2
 8000a4c:	d9f8      	bls.n	8000a40 <delay+0xc>
}
 8000a4e:	bf00      	nop
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	0003d08f 	.word	0x0003d08f

08000a60 <SPI2_GPIOInits>:

/*************************************************************************************************************************************************/

void SPI2_GPIOInits(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 8000a66:	4b11      	ldr	r3, [pc, #68]	@ (8000aac <SPI2_GPIOInits+0x4c>)
 8000a68:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode	= GPIO_MODE_ALTFN;
 8000a6a:	2302      	movs	r3, #2
 8000a6c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 8000a6e:	2305      	movs	r3, #5
 8000a70:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000a72:	2300      	movs	r3, #0
 8000a74:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000a76:	2300      	movs	r3, #0
 8000a78:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	72bb      	strb	r3, [r7, #10]

	/* SCLK */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000a7e:	230d      	movs	r3, #13
 8000a80:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	4618      	mov	r0, r3
 8000a86:	f7ff fc95 	bl	80003b4 <GPIO_Init>

	/* MOSI */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000a8a:	230f      	movs	r3, #15
 8000a8c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	4618      	mov	r0, r3
 8000a92:	f7ff fc8f 	bl	80003b4 <GPIO_Init>
	/* MISO */
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	//GPIO_Init(&SPIPins);

	/* NSS */
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000a96:	230c      	movs	r3, #12
 8000a98:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fc89 	bl	80003b4 <GPIO_Init>

}
 8000aa2:	bf00      	nop
 8000aa4:	3710      	adds	r7, #16
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	40020400 	.word	0x40020400

08000ab0 <SPI2_Inits>:
/*************************************************************************************************************************************************/

void SPI2_Inits()
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b084      	sub	sp, #16
 8000ab4:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2handle;
	SPI2handle.pSPIx = SPI2;
 8000ab6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ae8 <SPI2_Inits+0x38>)
 8000ab8:	607b      	str	r3, [r7, #4]
	SPI2handle.SPI_Config.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000aba:	2301      	movs	r3, #1
 8000abc:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPI_Config.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000abe:	2301      	movs	r3, #1
 8000ac0:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPI_Config.SPI_SclkSpeed = SPI_SCLCK_SPEED_DIV8; /* generates sclk of 2MHz, fclk= 16MHz */
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	72bb      	strb	r3, [r7, #10]
	SPI2handle.SPI_Config.SPI_DFF = SPI_DFF_8BITS;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	72fb      	strb	r3, [r7, #11]
	SPI2handle.SPI_Config.SPI_CPOL = SPI_CPOL_LOW;
 8000aca:	2300      	movs	r3, #0
 8000acc:	733b      	strb	r3, [r7, #12]
	SPI2handle.SPI_Config.SPI_CPHA = SPI_CPHA_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	737b      	strb	r3, [r7, #13]
	SPI2handle.SPI_Config.SPI_SSM = SPI_SSM_DI; /* hardware slave management enabled for NSS pin */
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	73bb      	strb	r3, [r7, #14]

	SPI_Init(&SPI2handle);
 8000ad6:	1d3b      	adds	r3, r7, #4
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f7ff fe8d 	bl	80007f8 <SPI_Init>

}
 8000ade:	bf00      	nop
 8000ae0:	3710      	adds	r7, #16
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	bd80      	pop	{r7, pc}
 8000ae6:	bf00      	nop
 8000ae8:	40003800 	.word	0x40003800

08000aec <GPIO_ButtonInit>:

/*************************************************************************************************************************************************/
void GPIO_ButtonInit(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b084      	sub	sp, #16
 8000af0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;
	/* button gpio configuration */
		GpioBtn.pGPIOx = GPIOC;
 8000af2:	4b09      	ldr	r3, [pc, #36]	@ (8000b18 <GPIO_ButtonInit+0x2c>)
 8000af4:	607b      	str	r3, [r7, #4]
		GpioBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 8000af6:	230d      	movs	r3, #13
 8000af8:	723b      	strb	r3, [r7, #8]
		GpioBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 8000afa:	2300      	movs	r3, #0
 8000afc:	727b      	strb	r3, [r7, #9]
		GpioBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000afe:	2302      	movs	r3, #2
 8000b00:	72bb      	strb	r3, [r7, #10]
		GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000b02:	2300      	movs	r3, #0
 8000b04:	72fb      	strb	r3, [r7, #11]

		GPIO_Init(&GpioBtn);
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	4618      	mov	r0, r3
 8000b0a:	f7ff fc53 	bl	80003b4 <GPIO_Init>
}
 8000b0e:	bf00      	nop
 8000b10:	3710      	adds	r7, #16
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40020800 	.word	0x40020800

08000b1c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b1c:	480d      	ldr	r0, [pc, #52]	@ (8000b54 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b1e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b20:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b24:	480c      	ldr	r0, [pc, #48]	@ (8000b58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b26:	490d      	ldr	r1, [pc, #52]	@ (8000b5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b28:	4a0d      	ldr	r2, [pc, #52]	@ (8000b60 <LoopForever+0xe>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b2c:	e002      	b.n	8000b34 <LoopCopyDataInit>

08000b2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b32:	3304      	adds	r3, #4

08000b34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b38:	d3f9      	bcc.n	8000b2e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b3a:	4a0a      	ldr	r2, [pc, #40]	@ (8000b64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b3c:	4c0a      	ldr	r4, [pc, #40]	@ (8000b68 <LoopForever+0x16>)
  movs r3, #0
 8000b3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b40:	e001      	b.n	8000b46 <LoopFillZerobss>

08000b42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b44:	3204      	adds	r2, #4

08000b46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b48:	d3fb      	bcc.n	8000b42 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b4a:	f000 f811 	bl	8000b70 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b4e:	f7ff ff27 	bl	80009a0 <main>

08000b52 <LoopForever>:

LoopForever:
  b LoopForever
 8000b52:	e7fe      	b.n	8000b52 <LoopForever>
  ldr   r0, =_estack
 8000b54:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b5c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b60:	08000bec 	.word	0x08000bec
  ldr r2, =_sbss
 8000b64:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b68:	2000001c 	.word	0x2000001c

08000b6c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b6c:	e7fe      	b.n	8000b6c <ADC_IRQHandler>
	...

08000b70 <__libc_init_array>:
 8000b70:	b570      	push	{r4, r5, r6, lr}
 8000b72:	4d0d      	ldr	r5, [pc, #52]	@ (8000ba8 <__libc_init_array+0x38>)
 8000b74:	4c0d      	ldr	r4, [pc, #52]	@ (8000bac <__libc_init_array+0x3c>)
 8000b76:	1b64      	subs	r4, r4, r5
 8000b78:	10a4      	asrs	r4, r4, #2
 8000b7a:	2600      	movs	r6, #0
 8000b7c:	42a6      	cmp	r6, r4
 8000b7e:	d109      	bne.n	8000b94 <__libc_init_array+0x24>
 8000b80:	4d0b      	ldr	r5, [pc, #44]	@ (8000bb0 <__libc_init_array+0x40>)
 8000b82:	4c0c      	ldr	r4, [pc, #48]	@ (8000bb4 <__libc_init_array+0x44>)
 8000b84:	f000 f818 	bl	8000bb8 <_init>
 8000b88:	1b64      	subs	r4, r4, r5
 8000b8a:	10a4      	asrs	r4, r4, #2
 8000b8c:	2600      	movs	r6, #0
 8000b8e:	42a6      	cmp	r6, r4
 8000b90:	d105      	bne.n	8000b9e <__libc_init_array+0x2e>
 8000b92:	bd70      	pop	{r4, r5, r6, pc}
 8000b94:	f855 3b04 	ldr.w	r3, [r5], #4
 8000b98:	4798      	blx	r3
 8000b9a:	3601      	adds	r6, #1
 8000b9c:	e7ee      	b.n	8000b7c <__libc_init_array+0xc>
 8000b9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ba2:	4798      	blx	r3
 8000ba4:	3601      	adds	r6, #1
 8000ba6:	e7f2      	b.n	8000b8e <__libc_init_array+0x1e>
 8000ba8:	08000be4 	.word	0x08000be4
 8000bac:	08000be4 	.word	0x08000be4
 8000bb0:	08000be4 	.word	0x08000be4
 8000bb4:	08000be8 	.word	0x08000be8

08000bb8 <_init>:
 8000bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bba:	bf00      	nop
 8000bbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bbe:	bc08      	pop	{r3}
 8000bc0:	469e      	mov	lr, r3
 8000bc2:	4770      	bx	lr

08000bc4 <_fini>:
 8000bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bc6:	bf00      	nop
 8000bc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bca:	bc08      	pop	{r3}
 8000bcc:	469e      	mov	lr, r3
 8000bce:	4770      	bx	lr
